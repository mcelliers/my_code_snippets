/***************************************************************************************************************************\
*                                          <CLASS> VIEWMODEL BASE <CLASS>   
*                                                      BaseViewModel    
*  CLASS   [Name of Class]
*  Created 2020-12-03
*  Marius Celliers  ( Copyright Quantum Design and Engineering (PTY) Ltd. 2014 )
* 
*  Updated by ................ On ..............
*  Changes Made  ...............................  
* 
*  Updated by ................ On ..............
*  Changes Made  ...............................  
* 
* 
\***************************************************************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace ReaderTester.ViewModels
{
    public class BaseViewModel : INotifyPropertyChanged, IDisposable
    {
        #region PROPERTY_CHANGED_NOTIFICATION

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string PropertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(PropertyName));
        }

        /****************************************************************************************************/
        #endregion

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        ~BaseViewModel()
        {
            //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(false);
            Debug.WriteLine("Closing Model");
        }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            // GC.SuppressFinalize(this);
        }
        #endregion

    } //Class End
} // NameSpace End
